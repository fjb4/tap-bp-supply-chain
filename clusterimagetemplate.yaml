apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: kpack-template-dotnet
spec:
  imagePath: .status.latestImage
  params:
  - default: default
    name: serviceAccount
  - default: default
    name: clusterBuilder
  - default: {}
    name: registry
  ytt: |
    #@ load("@ytt:data", "data")

    #@ def workload_param(name):
    #@   if not hasattr(data.values.workload.spec, "params"):
    #@     return None
    #@   end
    #@   for p in data.values.workload.spec.params:
    #@     if p.name == name:
    #@       return p.value
    #@     end
    #@   end
    #@ end

    apiVersion: kpack.io/v1alpha1
    kind: Image
    metadata:
      name: #@ data.values.workload.metadata.name
      labels:
        app.kubernetes.io/component: build
        #! TODO find a better syntax
        #@ if/end hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
        app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
    spec:
      tag: #@ data.values.params.registry.server + "/" + data.values.params.registry.repository + "/" + data.values.workload.metadata.name
      serviceAccount: #@ data.values.params.serviceAccount
      builder:
        kind: ClusterBuilder
        name: #@ data.values.params.clusterBuilder
      source:
        blob:
          url: #@ data.values.source.url
      build:
        #! TODO should we include all workload defined envs?
        env:
        - name: BP_OCI_SOURCE
          value: #@ data.values.source.revision
        #@ if/end workload_param("project-path"):
        - name: BP_DOTNET_PROJECT_PATH
          value: #@ workload_param("project-path")
        #@ if/end workload_param("live-update"):
        - name: BP_LIVE_RELOAD_ENABLED
          value: 'true'
